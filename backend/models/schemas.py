"""
MongoDB Schemas for Medical CDSS
Comprehensive data models for patient management and clinical decision support
"""

from datetime import datetime
from typing import Dict, List, Optional, Any
from bson import ObjectId
import pymongo
from enum import Enum

class TriageLevel(Enum):
    EMERGENCY = "Seek Emergency Care Immediately"
    URGENT = "Consult a Doctor Within 24 Hours"
    ROUTINE = "Self-Care Advice Possible"
    FOLLOW_UP = "Schedule Routine Follow-up"

class ReportType(Enum):
    XRAY = "X-Ray"
    MRI = "MRI"
    CT = "CT"
    ULTRASOUND = "Ultrasound"
    BLOODWORK = "Bloodwork"
    PATHOLOGY = "Pathology"
    CLINICAL_NOTES = "Clinical Notes"
    ECG = "ECG"
    ECHO = "Echocardiogram"

class FlagSeverity(Enum):
    CRITICAL = "Critical"
    WARNING = "Warning"
    INFO = "Info"

class UserSchema:
    """User profile schema with comprehensive medical data"""
    
    @staticmethod
    def get_schema():
        return {
            "_id": ObjectId,
            "username": str,  # Required, unique
            "email": str,     # Required, unique
            "password_hash": str,  # bcrypt hashed
            "created_at": datetime,
            "last_login": datetime,
            "profile": {
                "personal_info": {
                    "full_name": str,
                    "age": int,
                    "biological_sex": str,  # Male/Female/Other
                    "date_of_birth": str,
                    "phone": str,
                    "emergency_contact": {
                        "name": str,
                        "phone": str,
                        "relationship": str
                    }
                },
                "medical_history": {
                    "past_conditions": [str],
                    "surgeries": [{
                        "procedure": str,
                        "date": str,
                        "hospital": str,
                        "complications": str
                    }],
                    "family_history": {
                        "diabetes": bool,
                        "heart_disease": bool,
                        "cancer": bool,
                        "hypertension": bool,
                        "other": [str]
                    }
                },
                "medications": [{
                    "name": str,
                    "dosage": str,
                    "frequency": str,
                    "start_date": str,
                    "prescribing_doctor": str,
                    "ai_info": str,  # Generated by Gemini
                    "active": bool
                }],
                "allergies": [{
                    "allergen": str,
                    "reaction": str,
                    "severity": str  # Mild/Moderate/Severe
                }],
                "lifestyle": {
                    "smoking": {
                        "status": str,  # Never/Former/Current
                        "packs_per_day": float,
                        "years_smoked": int
                    },
                    "alcohol": {
                        "frequency": str,  # Never/Occasional/Regular/Heavy
                        "drinks_per_week": int
                    },
                    "exercise": {
                        "frequency": str,
                        "type": [str],
                        "duration_minutes": int
                    },
                    "diet": {
                        "type": str,  # Vegetarian/Non-vegetarian/Vegan
                        "restrictions": [str]
                    },
                    "sleep": {
                        "hours_per_night": float,
                        "quality": str,  # Poor/Fair/Good/Excellent
                        "sleep_disorders": [str]
                    }
                },
                "insurance": {
                    "provider": str,
                    "policy_number": str,
                    "coverage_type": str,
                    "financial_capability": str  # Low/Medium/High
                }
            },
            "privacy_settings": {
                "data_sharing_consent": bool,
                "research_participation": bool,
                "doctor_access_level": str  # Full/Limited/Emergency-only
            }
        }

class InteractionSchema:
    """Patient-AI interaction schema for symptom checking and triage"""
    
    @staticmethod
    def get_schema():
        return {
            "_id": ObjectId,
            "user_id": ObjectId,  # Reference to User
            "session_id": str,    # Unique session identifier
            "started_at": datetime,
            "completed_at": datetime,
            "status": str,  # Active/Completed/Abandoned
            
            "initial_complaint": {
                "primary_symptom": str,
                "user_description": str,
                "duration": str,
                "severity": int,  # 1-10 scale
                "onset": str     # Sudden/Gradual
            },
            
            "conversation_log": [{
                "sequence": int,
                "ai_question": str,
                "user_answer": str,
                "timestamp": datetime,
                "question_type": str  # Clarification/Severity/Location/Duration/Associated
            }],
            
            "ai_assessment": {
                "likely_conditions": [{
                    "condition": str,
                    "probability": float,  # 0.0 to 1.0
                    "confidence": str,     # Low/Medium/High
                    "reasoning": str
                }],
                "triage_level": str,  # From TriageLevel enum
                "urgency_score": int, # 1-10
                "red_flags": [str],   # Emergency indicators
                "explanation": str,   # Patient-friendly explanation
                "next_steps": [str]
            },
            
            "doctor_report": {
                "chief_complaint": str,
                "history_present_illness": str,
                "relevant_pmh": str,
                "medications_allergies": str,
                "differential_diagnosis": [str],
                "red_flags": [str],
                "generated_at": datetime
            },
            
            "follow_up": {
                "recommended_timeline": str,
                "monitoring_instructions": [str],
                "return_if_worse": [str]
            }
        }

class MedicalReportSchema:
    """Medical imaging and report analysis schema"""
    
    @staticmethod
    def get_schema():
        return {
            "_id": ObjectId,
            "user_id": ObjectId,
            "interaction_id": ObjectId,  # Link to symptom session if applicable
            "upload_metadata": {
                "original_filename": str,
                "file_size": int,
                "mime_type": str,
                "upload_timestamp": datetime,
                "file_hash": str,  # SHA-256 for integrity
                "storage_url": str  # Secure cloud storage URL
            },
            
            "report_classification": {
                "type": str,  # From ReportType enum
                "modality": str,  # X-Ray/MRI/CT/US/Lab/Pathology
                "body_part": str, # Chest/Abdomen/Head/Extremity
                "study_date": str,
                "ordering_physician": str,
                "institution": str
            },
            
            "ai_analysis": {
                # For Imaging Reports
                "image_findings": {
                    "description": str,  # Detailed AI description
                    "anatomical_structures": [str],
                    "abnormalities": [{
                        "finding": str,
                        "location": str,
                        "severity": str,  # Mild/Moderate/Severe
                        "confidence": float,
                        "coordinates": {  # If applicable
                            "x": float,
                            "y": float,
                            "width": float,
                            "height": float
                        }
                    }],
                    "comparison_to_normal": str,
                    "technical_quality": str  # Good/Fair/Poor/Non-diagnostic
                },
                
                # For Text Reports (Lab, Pathology, Clinical Notes)
                "text_analysis": {
                    "summary": str,
                    "key_findings": [str],
                    "abnormal_values": [{
                        "parameter": str,
                        "value": str,
                        "reference_range": str,
                        "significance": str
                    }],
                    "extracted_metrics": Dict,  # Structured data extraction
                    "clinical_significance": str
                },
                
                # Common Analysis Fields
                "overall_assessment": str,
                "confidence_score": float,  # 0.0 to 1.0
                "processing_time": float,   # Seconds
                "model_version": str,
                
                "flags": [{
                    "severity": str,  # From FlagSeverity enum
                    "message": str,
                    "location": str,
                    "recommendation": str,
                    "requires_immediate_attention": bool
                }],
                
                "recommendations": {
                    "immediate_actions": [str],
                    "follow_up_studies": [str],
                    "specialist_referrals": [str],
                    "correlation_needed": [str]  # "Correlate with clinical symptoms"
                }
            },
            
            "radiologist_review": {
                "reviewed": bool,
                "reviewer_id": str,
                "review_date": datetime,
                "final_interpretation": str,
                "ai_accuracy_rating": int,  # 1-5 scale
                "discrepancies": [str]
            },
            
            "patient_communication": {
                "simplified_explanation": str,
                "patient_questions": [str],
                "ai_responses": [str],
                "shared_with_patient": bool,
                "shared_at": datetime
            }
        }

class DoctorSchema:
    """Healthcare provider schema for recommendations"""
    
    @staticmethod
    def get_schema():
        return {
            "_id": ObjectId,
            "profile": {
                "name": str,
                "license_number": str,
                "specializations": [str],
                "qualifications": [str],
                "experience_years": int,
                "languages": [str]
            },
            "practice_info": {
                "clinic_name": str,
                "address": {
                    "street": str,
                    "city": str,
                    "state": str,
                    "pincode": str,
                    "country": str,
                    "coordinates": {
                        "latitude": float,
                        "longitude": float
                    }
                },
                "contact": {
                    "phone": str,
                    "email": str,
                    "website": str
                },
                "availability": {
                    "days": [str],
                    "hours": str,
                    "emergency_availability": bool,
                    "telemedicine": bool
                }
            },
            "financial": {
                "consultation_fee": {
                    "min": float,
                    "max": float,
                    "currency": str
                },
                "insurance_accepted": [str],
                "payment_methods": [str],
                "cost_category": str  # Budget/Standard/Premium
            },
            "ratings": {
                "overall_rating": float,
                "total_reviews": int,
                "patient_satisfaction": float,
                "response_time": str
            },
            "verification": {
                "verified": bool,
                "verification_date": datetime,
                "license_verified": bool,
                "background_check": bool
            }
        }

class HospitalSchema:
    """Hospital and clinic schema"""
    
    @staticmethod
    def get_schema():
        return {
            "_id": ObjectId,
            "basic_info": {
                "name": str,
                "type": str,  # Government/Private/Trust/Corporate
                "accreditation": [str],  # NABH/JCI/ISO
                "established_year": int
            },
            "location": {
                "address": {
                    "street": str,
                    "city": str,
                    "state": str,
                    "pincode": str,
                    "coordinates": {
                        "latitude": float,
                        "longitude": float
                    }
                },
                "accessibility": {
                    "public_transport": bool,
                    "parking_available": bool,
                    "wheelchair_accessible": bool
                }
            },
            "services": {
                "emergency_services": bool,
                "icu_beds": int,
                "general_beds": int,
                "specialties": [str],
                "diagnostic_facilities": [str],  # MRI/CT/X-Ray/Lab
                "surgical_facilities": [str],
                "pharmacy": bool,
                "blood_bank": bool
            },
            "financial": {
                "cost_category": str,  # Budget/Standard/Premium
                "insurance_accepted": [str],
                "cashless_facilities": [str],
                "average_consultation": float,
                "average_procedure_cost": Dict
            },
            "quality_metrics": {
                "rating": float,
                "patient_satisfaction": float,
                "infection_rate": float,
                "mortality_rate": float,
                "readmission_rate": float
            },
            "contact": {
                "phone": str,
                "emergency_phone": str,
                "email": str,
                "website": str
            }
        }

# Database Indexes for Performance
REQUIRED_INDEXES = {
    "users": [
        {"email": 1},  # Unique index
        {"username": 1},  # Unique index
        {"profile.personal_info.phone": 1}
    ],
    "interactions": [
        {"user_id": 1, "started_at": -1},
        {"status": 1},
        {"ai_assessment.triage_level": 1}
    ],
    "medical_reports": [
        {"user_id": 1, "upload_metadata.upload_timestamp": -1},
        {"report_classification.type": 1},
        {"ai_analysis.flags.severity": 1},
        {"radiologist_review.reviewed": 1}
    ],
    "doctors": [
        {"practice_info.address.coordinates": "2dsphere"},  # Geospatial index
        {"profile.specializations": 1},
        {"financial.cost_category": 1},
        {"verification.verified": 1}
    ],
    "hospitals": [
        {"location.address.coordinates": "2dsphere"},  # Geospatial index
        {"services.emergency_services": 1},
        {"services.specialties": 1},
        {"financial.cost_category": 1}
    ]
}